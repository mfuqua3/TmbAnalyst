// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TmbAnalyst.Services.DataAccess;

#nullable disable

namespace TmbAnalyst.Services.DataAccess.Migrations
{
    [DbContext(typeof(TmbAnalystDbContext))]
    [Migration("20220127191539_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.CharacterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItems");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("ItemSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemSourceId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.ItemSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemSourceCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemSourceCategoryId");

                    b.ToTable("ItemSources");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.ItemSourceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemSourceCategories");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.CharacterItem", b =>
                {
                    b.HasOne("TmbAnalyst.Services.DataAccess.Entities.Character", "Character")
                        .WithMany("CharacterItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TmbAnalyst.Services.DataAccess.Entities.Item", "Item")
                        .WithMany("CharacterItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.Item", b =>
                {
                    b.HasOne("TmbAnalyst.Services.DataAccess.Entities.ItemSource", "ItemSource")
                        .WithMany("Items")
                        .HasForeignKey("ItemSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemSource");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.ItemSource", b =>
                {
                    b.HasOne("TmbAnalyst.Services.DataAccess.Entities.ItemSourceCategory", "ItemSourceCategory")
                        .WithMany("ItemSources")
                        .HasForeignKey("ItemSourceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ItemSourceCategory");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.Character", b =>
                {
                    b.Navigation("CharacterItems");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.Item", b =>
                {
                    b.Navigation("CharacterItems");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.ItemSource", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TmbAnalyst.Services.DataAccess.Entities.ItemSourceCategory", b =>
                {
                    b.Navigation("ItemSources");
                });
#pragma warning restore 612, 618
        }
    }
}
